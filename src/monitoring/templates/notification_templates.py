"""
Notification templates for Process Dashboard monitoring.

Provides templates for different notification formats.
"""

from typing import Dict, Any
from datetime import datetime
import json
from pathlib import Path

# Email templates
EMAIL_TEMPLATES = {
    "alert": {
        "subject": "Process Dashboard Alert: {level}",
        "body": """
Process Dashboard Alert

Time: {timestamp}
Level: {level}
Title: {title}
Message: {message}

System Status:
- CPU Usage: {cpu_percent}%
- Memory Usage: {memory_percent}%
- Disk Usage: {disk_percent}%

For more details, check the dashboard.
        """
    },
    "daily_report": {
        "subject": "Process Dashboard Daily Report",
        "body": """
Process Dashboard Daily Report

Date: {date}

System Summary:
{summary}

Alerts (Last 24h):
{alerts}

Performance Statistics:
{stats}

Generated by Process Dashboard
        """
    }
}

# Desktop notification templates
DESKTOP_TEMPLATES = {
    "alert": {
        "title": "Process Dashboard {level}",
        "body": "{message}",
        "urgency": "critical"
    },
    "info": {
        "title": "Process Dashboard Info",
        "body": "{message}",
        "urgency": "normal"
    }
}

# Log templates
LOG_TEMPLATES = {
    "alert": "[{timestamp}] [{level}] {title}: {message}",
    "metric": "[{timestamp}] METRIC {name}={value} {unit}",
    "event": "[{timestamp}] EVENT {category}: {message}"
}

class NotificationFormatter:
    """Notification message formatter."""

    def __init__(self, config_path: Path = None):
        """Initialize formatter.
        
        Args:
            config_path: Path to custom templates
        """
        self.config_path = config_path or Path.home() / ".config" / "process-dashboard" / "notification_templates.json"
        self.email_templates = EMAIL_TEMPLATES.copy()
        self.desktop_templates = DESKTOP_TEMPLATES.copy()
        self.log_templates = LOG_TEMPLATES.copy()
        self.load_custom_templates()

    def load_custom_templates(self) -> None:
        """Load custom notification templates."""
        try:
            if self.config_path.exists():
                with open(self.config_path) as f:
                    templates = json.load(f)
                    if 'email' in templates:
                        self.email_templates.update(templates['email'])
                    if 'desktop' in templates:
                        self.desktop_templates.update(templates['desktop'])
                    if 'log' in templates:
                        self.log_templates.update(templates['log'])
        except Exception as e:
            print(f"Error loading templates: {e}")

    def format_email(self, template_name: str, values: Dict[str, Any]) -> Dict[str, str]:
        """Format email notification.
        
        Args:
            template_name: Template name
            values: Template values
            
        Returns:
            Dictionary with subject and body
        """
        template = self.email_templates.get(template_name)
        if not template:
            return {}

        try:
            values['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            return {
                'subject': template['subject'].format(**values),
                'body': template['body'].format(**values).strip()
            }
        except Exception as e:
            print(f"Error formatting email: {e}")
            return {}

    def format_desktop(self, template_name: str, values: Dict[str, Any]) -> Dict[str, str]:
        """Format desktop notification.
        
        Args:
            template_name: Template name
            values: Template values
            
        Returns:
            Dictionary with notification properties
        """
        template = self.desktop_templates.get(template_name)
        if not template:
            return {}

        try:
            return {
                'title': template['title'].format(**values),
                'body': template['body'].format(**values),
                'urgency': template['urgency']
            }
        except Exception as e:
            print(f"Error formatting desktop notification: {e}")
            return {}

    def format_log(self, template_name: str, values: Dict[str, Any]) -> str:
        """Format log message.
        
        Args:
            template_name: Template name
            values: Template values
            
        Returns:
            Formatted log message
        """
        template = self.log_templates.get(template_name)
        if not template:
            return ""

        try:
            values['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            return template.format(**values)
        except Exception as e:
            print(f"Error formatting log message: {e}")
            return ""
